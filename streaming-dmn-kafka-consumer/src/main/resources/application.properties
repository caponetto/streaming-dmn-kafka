# Quarkus config
quarkus.ssl.native=true

quarkus.swagger-ui.always-include=true

# Configure the Kafka sink (we write to it)
mp.messaging.outgoing.kogito_outgoing_stream.group.id=streaming-dmn-kafka
mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka
mp.messaging.outgoing.kogito_outgoing_stream.topic=${TOPIC:decisions}
mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Configure the Kafka source (we read from it)
mp.messaging.incoming.kogito_incoming_stream.group.id=streaming-dmn-kafka
mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka
# Topic name that will be published/consumed.
mp.messaging.incoming.kogito_incoming_stream.topic=${TOPIC:decisions}
mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.kogito_incoming_stream.broadcast=true

# `oauth` profile
# Export the required variables and run with -Dquarkus.profile=oauth
%oauth.kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
%oauth.kafka.security.protocol=SASL_SSL
%oauth.kafka.sasl.mechanism=OAUTHBEARER
%oauth.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
%oauth.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
